{"version":3,"file":"popup.js","mappings":"yBAEA,MAAMA,EAAeC,SAASC,eAC5B,UAEIC,EAAgBF,SAASC,eAC7B,WAEIE,EAAgBH,SAASC,eAC7B,WAEIG,EAAgBJ,SAASC,eAC7B,WAIII,EAAU,CACdC,OAAQP,EACRQ,QAASL,EACTM,QAASL,EACTM,QAASL,GAIX,SAASM,EACPC,EACAC,GAGA,IAAK,MAAMC,KAAOR,EAAS,CACzB,MAAMS,EAAST,EAAQQ,GACnBC,IACFA,EAAOC,UAAUC,OAAO,UACxBF,EAAOG,YAAc,YAAYJ,EAAIK,MAAM,KAE/C,CACA,IAAKP,EAAc,OAEnB,MAAMQ,EAAYd,EAAQM,GACtBQ,IACFA,EAAUF,YAAcL,EACpB,oBAAoBD,EAAaO,MAAM,KACvC,YAAYP,EAAaO,MAAM,KACnCC,EAAUJ,UAAUK,OAAO,SAAUR,GAEzC,CAGA,SAASS,EAAgBV,GACvB,IAAIW,EAAY,GACK,YAAjBX,EAA4BW,EAAY,KAClB,YAAjBX,EAA4BW,EAAY,KACvB,YAAjBX,EAA4BW,EAAY,KACvB,WAAjBX,IAA2BW,EAAY,KAEhDC,OAAOC,OAAOC,aAAa,CAAEC,KAAMJ,IAAaK,MAAMC,QAAQC,MAChE,CAQA,SAASC,EAAkBC,EAAuBC,GAChDT,OAAOU,QAAQC,KAAKC,IAAI,eAAgBC,IAClCA,EAAKC,cAAgBN,EAEvBR,OAAOU,QAAQC,KAAKlB,OAAO,eAAe,KACxCN,EAAkBqB,GAAU,GAC5BR,OAAOC,OAAOC,aAAa,CAAEC,KAAM,KAAMC,MAAMC,QAAQC,OACvDN,OAAOe,KAAKC,MAAM,CAAEC,QAAQ,EAAMC,eAAe,IAASH,IACxD,QAAmBI,IAAfJ,EAAK,GAAGK,GAAkB,CAC5B,MAAMC,EAAmB,CAAEC,cAAc,GACzCtB,OAAOe,KAAKQ,YAAYR,EAAK,GAAGK,GAAIC,GAASjB,MAAMC,QAAQC,MAC7D,IACA,IAIJN,OAAOU,QAAQC,KAAKa,IAAI,CAAEV,YAAaN,IAAY,KACjDrB,EAAkBqB,GAAU,GAC5BV,EAAgBU,GAChBR,OAAOe,KAAKC,MAAM,CAAEC,QAAQ,EAAMC,eAAe,IAASH,IACxD,QAAmBI,IAAfJ,EAAK,GAAGK,GAAkB,CAC5B,MAAMC,EAAmB,CAAEI,gBAAiBhB,GAC5CT,OAAOe,KAAKQ,YAAYR,EAAK,GAAGK,GAAIC,GAASjB,MAAMC,QAAQC,MAC7D,IACA,GAEN,GAEJ,CAjCAN,OAAOU,QAAQC,KAAKC,IAAI,eAAgBC,IACtC1B,EAAkB0B,EAAKC,aAAa,GACpChB,EAAgBe,EAAKC,YAAY,IAkCnCnC,SAAAA,EAAe+C,iBAAiB,SAAS,IACvCnB,EAAkB,UAAW,QAE/B3B,SAAAA,EAAe8C,iBAAiB,SAAS,IACvCnB,EAAkB,UAAW,QAE/B1B,SAAAA,EAAe6C,iBAAiB,SAAS,IACvCnB,EAAkB,UAAW,QAE/B/B,SAAAA,EAAckD,iBAAiB,SAAS,IACtCnB,EAAkB,SAAU,OAI9B,MAAMoB,EAAiBlD,SAASmD,cAAc,kBACzCD,EAGHA,EAAeD,iBAAiB,SAAS,WAEnC1B,OAAO6B,QAAQC,gBACjB9B,OAAO6B,QAAQC,kBAAkB1B,OAAOE,IACtCD,QAAQC,MAAM,8BAA+BA,EAAM,IAGrDyB,OAAOC,KAAKhC,OAAO6B,QAAQI,OAAO,gBAEtC,IAXA5B,QAAQC,MAAM,iC","sources":["webpack://video-sleep-chrome-extension/./src/popup.ts"],"sourcesContent":["import { buttonsType, Message, StoredConfig } from \"./common\"\n\nconst pause5Button = document.getElementById(\n  \"pause5\",\n) as HTMLButtonElement | null\nconst pause30Button = document.getElementById(\n  \"pause30\",\n) as HTMLButtonElement | null\nconst pause45Button = document.getElementById(\n  \"pause45\",\n) as HTMLButtonElement | null\nconst pause60Button = document.getElementById(\n  \"pause60\",\n) as HTMLButtonElement | null\n\n/// Define the buttons object\nconst buttons = {\n  pause5: pause5Button,\n  pause30: pause30Button,\n  pause45: pause45Button,\n  pause60: pause60Button,\n} as const\n// type buttonsType = keyof typeof buttons\n// Function to update button text and state\nfunction updateButtonState(\n  activeButton: buttonsType | undefined,\n  makeActive: boolean,\n): void {\n  // Remove the active class from all buttons and reset text content\n  for (const key in buttons) {\n    const button = buttons[key as buttonsType]\n    if (button) {\n      button.classList.remove(\"active\")\n      button.textContent = `Pause in ${key.slice(5)}`\n    }\n  }\n  if (!activeButton) return\n  // Update the active button\n  const activeBtn = buttons[activeButton]\n  if (activeBtn) {\n    activeBtn.textContent = makeActive\n      ? `Disable Pause in ${activeButton.slice(5)}`\n      : `Pause in ${activeButton.slice(5)}`\n    activeBtn.classList.toggle(\"active\", makeActive)\n  }\n}\n\n// Function to update the badge text\nfunction updateBadgeText(activeButton: buttonsType | undefined): void {\n  let badgeText = \"\"\n  if (activeButton === \"pause30\") badgeText = \"30\"\n  else if (activeButton === \"pause45\") badgeText = \"45\"\n  else if (activeButton === \"pause60\") badgeText = \"60\"\n  else if (activeButton === \"pause5\") badgeText = \"5\"\n\n  chrome.action.setBadgeText({ text: badgeText }).catch(console.error)\n}\n\n// Load the current state from chrome storage\nchrome.storage.sync.get(\"activePause\", (data: StoredConfig) => {\n  updateButtonState(data.activePause, true)\n  updateBadgeText(data.activePause)\n})\n\nfunction handleButtonClick(buttonId: buttonsType, delay: number): void {\n  chrome.storage.sync.get(\"activePause\", (data: Record<string, string>) => {\n    if (data.activePause === buttonId) {\n      // Disable the active pause\n      chrome.storage.sync.remove(\"activePause\", () => {\n        updateButtonState(buttonId, false)\n        chrome.action.setBadgeText({ text: \"\" }).catch(console.error)\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n          if (tabs[0].id !== undefined) {\n            const message: Message = { clearPausing: true }\n            chrome.tabs.sendMessage(tabs[0].id, message).catch(console.error)\n          }\n        })\n      })\n    } else {\n      // Set new active pause\n      chrome.storage.sync.set({ activePause: buttonId }, () => {\n        updateButtonState(buttonId, true)\n        updateBadgeText(buttonId)\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n          if (tabs[0].id !== undefined) {\n            const message: Message = { startPauseTimer: delay }\n            chrome.tabs.sendMessage(tabs[0].id, message).catch(console.error)\n          }\n        })\n      })\n    }\n  })\n}\n\n// Event listeners for each button\npause30Button?.addEventListener(\"click\", () =>\n  handleButtonClick(\"pause30\", 1800000),\n) // 30 minutes\npause45Button?.addEventListener(\"click\", () =>\n  handleButtonClick(\"pause45\", 2700000),\n) // 45 minutes\npause60Button?.addEventListener(\"click\", () =>\n  handleButtonClick(\"pause60\", 3600000),\n) // 60 minutes\npause5Button?.addEventListener(\"click\", () =>\n  handleButtonClick(\"pause5\", 300000),\n) // 5 minutes\n\n// Options page\nconst optionsElement = document.querySelector(\"#go-to-options\")\nif (!optionsElement) {\n  console.error(\"Could not find options element\")\n} else {\n  optionsElement.addEventListener(\"click\", function () {\n    // This code is based on Chrome for Developers documentation\n    if (chrome.runtime.openOptionsPage) {\n      chrome.runtime.openOptionsPage().catch((error: unknown) => {\n        console.error(\"Could not open options page\", error)\n      })\n    } else {\n      window.open(chrome.runtime.getURL(\"options.html\"))\n    }\n  })\n}\n"],"names":["pause5Button","document","getElementById","pause30Button","pause45Button","pause60Button","buttons","pause5","pause30","pause45","pause60","updateButtonState","activeButton","makeActive","key","button","classList","remove","textContent","slice","activeBtn","toggle","updateBadgeText","badgeText","chrome","action","setBadgeText","text","catch","console","error","handleButtonClick","buttonId","delay","storage","sync","get","data","activePause","tabs","query","active","currentWindow","undefined","id","message","clearPausing","sendMessage","set","startPauseTimer","addEventListener","optionsElement","querySelector","runtime","openOptionsPage","window","open","getURL"],"sourceRoot":""}