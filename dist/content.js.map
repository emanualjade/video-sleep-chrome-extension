{"version":3,"file":"content.js","mappings":"mBAiBA,SAASA,IACP,MAAMC,EAAUC,SAASC,eAAe,iBACpCF,GACFC,SAASE,KAAKC,YAAYJ,EAE9B,CAGA,IAAIK,EAGJ,SAASC,EAAqBC,GAC5BC,IACAH,EAAcI,OAAOC,YAAW,KAC9B,MAAMC,EAAeV,SAASW,cAAgC,SAC1DD,IAAiBA,EAAaE,SAChCF,EAAaG,QAjCnB,WACE,MAAMd,EAAUC,SAASc,cAAc,OACvCf,EAAQgB,GAAK,gBACbhB,EAAQiB,MAAMC,SAAW,QACzBlB,EAAQiB,MAAME,IAAM,IACpBnB,EAAQiB,MAAMG,KAAO,IACrBpB,EAAQiB,MAAMI,MAAQ,OACtBrB,EAAQiB,MAAMK,OAAS,OACvBtB,EAAQiB,MAAMM,gBAAkB,QAChCvB,EAAQiB,MAAMO,QAAU,IACxBxB,EAAQiB,MAAMQ,OAAS,OAEvBzB,EAAQ0B,iBAAiB,QAAS3B,GAElCE,SAASE,KAAKwB,YAAY3B,EAC5B,CAmBM4B,GACF,GACCrB,EACL,CAGA,SAASC,SACaqB,IAAhBxB,IACFyB,aAAazB,GACbA,OAAcwB,EAElB,CAGA,SAASE,EAAgBC,GACvB,OAAQA,GACN,IAAK,UACH,OAAO,KACT,IAAK,UACH,OAAO,KACT,IAAK,UACH,OAAO,KACT,IAAK,SACH,OAAO,IACT,QACE,OAEN,CAwBAC,OAAOC,QAAQC,UAAUC,aAAaC,SACJR,IAA5BQ,EAAQC,kBAEV9B,IACAF,EAAqB+B,EAAQC,kBAG3BD,EAAQE,cACV/B,GACF,IAIFyB,OAAOO,QAAQC,KAAKC,IAClB,eACCC,IACC,MAAMpC,EAAQwB,EAAgBY,EAAKC,kBACrBf,IAAVtB,GACFD,EAAqBC,GAvC3B,WACE,MAAMI,EAAeV,SAASW,cAAgC,SAC1DD,GACFA,EAAae,iBAAiB,QAAQ,KACpCO,OAAOO,QAAQC,KAAKC,IAClB,eACCC,IACC,MAAMpC,EAAQwB,EAAgBY,EAAKC,kBACrBf,IAAVtB,GACFD,EAAqBC,EACvB,GAEH,GAGP,CA2BIsC,EAAwB,G","sources":["webpack://video-sleep-chrome-extension/./src/content.ts"],"sourcesContent":["function addBlackOverlay(): void {\n  const overlay = document.createElement(\"div\")\n  overlay.id = \"black-overlay\"\n  overlay.style.position = \"fixed\"\n  overlay.style.top = \"0\"\n  overlay.style.left = \"0\"\n  overlay.style.width = \"100%\"\n  overlay.style.height = \"100%\"\n  overlay.style.backgroundColor = \"black\"\n  overlay.style.opacity = \"1\"\n  overlay.style.zIndex = \"9999\" // Ensure it is on top of other elements\n\n  overlay.addEventListener(\"click\", removeBlackOverlay)\n\n  document.body.appendChild(overlay)\n}\n\nfunction removeBlackOverlay(): void {\n  const overlay = document.getElementById(\"black-overlay\")\n  if (overlay) {\n    document.body.removeChild(overlay)\n  }\n}\n\n// Variable to store the active timer ID\nlet activeTimer: number | undefined\n\n// Function to pause the video after a specified delay\nfunction pauseVideoAfterDelay(delay: number): void {\n  clearExistingTimer()\n  activeTimer = window.setTimeout(() => {\n    const videoElement = document.querySelector<HTMLVideoElement>(\"video\")\n    if (videoElement && !videoElement.paused) {\n      videoElement.pause()\n      addBlackOverlay()\n    }\n  }, delay)\n}\n\n// Clears the existing timer if there is one\nfunction clearExistingTimer(): void {\n  if (activeTimer !== undefined) {\n    clearTimeout(activeTimer)\n    activeTimer = undefined\n  }\n}\n\n// Function to get the delay based on the activePause key\nfunction getDelayFromKey(key: string | undefined): number | undefined {\n  switch (key) {\n    case \"pause30\":\n      return 1800000 // 30 minutes\n    case \"pause45\":\n      return 2700000 // 45 minutes\n    case \"pause60\":\n      return 3600000 // 60 minutes\n    case \"pause5\":\n      return 300000 // 5 minutes\n    default:\n      return undefined\n  }\n}\n\n// Listen for video play events to reset the timer\nfunction addVideoEventListeners(): void {\n  const videoElement = document.querySelector<HTMLVideoElement>(\"video\")\n  if (videoElement) {\n    videoElement.addEventListener(\"play\", () => {\n      chrome.storage.sync.get(\n        \"activePause\",\n        (data: Record<string, string | undefined>) => {\n          const delay = getDelayFromKey(data.activePause)\n          if (delay !== undefined) {\n            pauseVideoAfterDelay(delay)\n          }\n        },\n      )\n    })\n  }\n}\ninterface Message {\n  startPauseTimer?: number\n  clearPausing?: boolean\n}\n// Listen for messages from popup.js\nchrome.runtime.onMessage.addListener((message: Message) => {\n  if (message.startPauseTimer !== undefined) {\n    // Clear any existing timer and start a new one\n    clearExistingTimer()\n    pauseVideoAfterDelay(message.startPauseTimer)\n  }\n\n  if (message.clearPausing) {\n    clearExistingTimer()\n  }\n})\n\n// Check if a pause timer is active on page load/reload\nchrome.storage.sync.get(\n  \"activePause\",\n  (data: Record<string, string | undefined>) => {\n    const delay = getDelayFromKey(data.activePause)\n    if (delay !== undefined) {\n      pauseVideoAfterDelay(delay)\n    }\n    // Add event listeners to manage play/pause events\n    addVideoEventListeners()\n  },\n)\n"],"names":["removeBlackOverlay","overlay","document","getElementById","body","removeChild","activeTimer","pauseVideoAfterDelay","delay","clearExistingTimer","window","setTimeout","videoElement","querySelector","paused","pause","createElement","id","style","position","top","left","width","height","backgroundColor","opacity","zIndex","addEventListener","appendChild","addBlackOverlay","undefined","clearTimeout","getDelayFromKey","key","chrome","runtime","onMessage","addListener","message","startPauseTimer","clearPausing","storage","sync","get","data","activePause","addVideoEventListeners"],"sourceRoot":""}