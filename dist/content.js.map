{"version":3,"file":"content.js","mappings":"yBAEA,SAASA,EAAcC,GAErB,OAAOA,EAAKC,QAAQ,0BAA2B,IAAIC,aACrD,CAEA,SAASC,EAAeC,EAAkBC,GAExC,MAAMC,EAAqBP,EAAcK,GAEzC,OAAOC,EAAcE,MAAMC,IACzB,MAAMC,EAAyBV,EAAcS,GAE7C,OAAOF,EAAmBI,SAASD,EAAuB,GAE9D,CAmBA,SAASE,IACP,MAAMC,EAAUC,SAASC,eAAe,iBACpCF,GACFC,SAASE,KAAKC,YAAYJ,EAE9B,CAGA,IAAIK,EACAC,EAAyB,GAG7B,SAASC,EAAqBC,GAC5BC,IACAJ,EAAcK,OAAOC,YAAW,KAC9B,MAAMC,EAAeX,SAASY,cAAgC,SAC1DD,IAAiBA,EAAaE,SAChCF,EAAaG,QAlCnB,WACE,MAAMf,EAAUC,SAASe,cAAc,OACvChB,EAAQiB,GAAK,gBACbjB,EAAQkB,MAAMC,SAAW,QACzBnB,EAAQkB,MAAME,IAAM,IACpBpB,EAAQkB,MAAMG,KAAO,IACrBrB,EAAQkB,MAAMI,MAAQ,OACtBtB,EAAQkB,MAAMK,OAAS,OACvBvB,EAAQkB,MAAMM,gBAAkB,QAChCxB,EAAQkB,MAAMO,QAAU,IACxBzB,EAAQkB,MAAMQ,OAAS,OAEvB1B,EAAQ2B,iBAAiB,QAAS5B,GAElCE,SAASE,KAAKyB,YAAY5B,EAC5B,CAoBM6B,GACF,GACCrB,EACL,CAGA,SAASC,SACaqB,IAAhBzB,IACF0B,aAAa1B,GACbA,OAAcyB,EAElB,CAGA,SAASE,EAAgBC,GACvB,OAAQA,GACN,IAAK,UACH,OAAO,KACT,IAAK,UACH,OAAO,KACT,IAAK,UACH,OAAO,KACT,IAAK,SACH,OAAO,IACT,QACE,OAEN,CAkBAC,OAAOC,QAAQC,UAAUC,aAAaC,IACpC,QAA6BR,IAAzBQ,EAAQhC,aAAZ,CAKA,GAAIf,EAAemB,OAAO6B,SAAS/C,SAAUc,GAG3C,OAFAkC,QAAQC,IAAI,sCACZhC,SAI8BqB,IAA5BQ,EAAQI,kBAEVjC,IACAF,EAAqB+B,EAAQI,kBAG3BJ,EAAQK,cACVlC,GAfF,MAFEH,EAAegC,EAAQhC,YAkBzB,IAIF4B,OAAOU,QAAQC,KAAKC,IAAI,MAAOC,I,MAC7B,MAAMvC,EAAQwB,EAAgBe,EAAKC,aACnC1C,EAAgC,QAAjB,EAAAyC,EAAKzC,oBAAY,QAAI,GAEhCf,EAAemB,OAAO6B,SAAS/C,SAAUc,GAC3CkC,QAAQC,IAAI,uCAIAX,IAAVtB,GACFD,EAAqBC,GAjDzB,WACE,MAAMI,EAAeX,SAASY,cAAgC,SAC1DD,GACFA,EAAae,iBAAiB,QAAQ,KACpCO,OAAOU,QAAQC,KAAKC,IAAI,MAAOC,IAC7B,MAAMvC,EAAQwB,EAAgBe,EAAKC,kBACrBlB,IAAVtB,GACFD,EAAqBC,EACvB,GACA,GAGR,CAwCEyC,GAAwB,G","sources":["webpack://video-sleep-chrome-extension/./src/content.ts"],"sourcesContent":["import { Message, StoredConfig } from \"./common\"\n\nfunction normalizeHost(host: string) {\n  // Remove protocol (http, https, etc.) and \"www\" if it exists\n  return host.replace(/^(https?:\\/\\/)?(www\\.)?/, \"\").toLowerCase()\n}\n\nfunction isHostExcluded(hostname: string, excludedHosts: string[]): boolean {\n  // Normalize the current hostname\n  const normalizedHostname = normalizeHost(hostname)\n  // Normalize and compare each excluded host\n  return excludedHosts.some((excludedHost) => {\n    const normalizedExcludedHost = normalizeHost(excludedHost)\n    // Check if the hostname ends with the excluded host\n    return normalizedHostname.endsWith(normalizedExcludedHost)\n  })\n}\n\nfunction addBlackOverlay(): void {\n  const overlay = document.createElement(\"div\")\n  overlay.id = \"black-overlay\"\n  overlay.style.position = \"fixed\"\n  overlay.style.top = \"0\"\n  overlay.style.left = \"0\"\n  overlay.style.width = \"100%\"\n  overlay.style.height = \"100%\"\n  overlay.style.backgroundColor = \"black\"\n  overlay.style.opacity = \"1\"\n  overlay.style.zIndex = \"9999\" // Ensure it is on top of other elements\n\n  overlay.addEventListener(\"click\", removeBlackOverlay)\n\n  document.body.appendChild(overlay)\n}\n\nfunction removeBlackOverlay(): void {\n  const overlay = document.getElementById(\"black-overlay\")\n  if (overlay) {\n    document.body.removeChild(overlay)\n  }\n}\n\n// Variable to store the active timer ID\nlet activeTimer: number | undefined\nlet excludeHosts: string[] = []\n\n// Function to pause the video after a specified delay\nfunction pauseVideoAfterDelay(delay: number): void {\n  clearExistingTimer()\n  activeTimer = window.setTimeout(() => {\n    const videoElement = document.querySelector<HTMLVideoElement>(\"video\")\n    if (videoElement && !videoElement.paused) {\n      videoElement.pause()\n      addBlackOverlay()\n    }\n  }, delay)\n}\n\n// Clears the existing timer if there is one\nfunction clearExistingTimer(): void {\n  if (activeTimer !== undefined) {\n    clearTimeout(activeTimer)\n    activeTimer = undefined\n  }\n}\n\n// Function to get the delay based on the activePause key\nfunction getDelayFromKey(key: string | undefined): number | undefined {\n  switch (key) {\n    case \"pause30\":\n      return 1800000 // 30 minutes\n    case \"pause45\":\n      return 2700000 // 45 minutes\n    case \"pause60\":\n      return 3600000 // 60 minutes\n    case \"pause5\":\n      return 300000 // 5 minutes\n    default:\n      return undefined\n  }\n}\n\n// Listen for video play events to reset the timer\nfunction addVideoEventListeners(): void {\n  const videoElement = document.querySelector<HTMLVideoElement>(\"video\")\n  if (videoElement) {\n    videoElement.addEventListener(\"play\", () => {\n      chrome.storage.sync.get(null, (data: StoredConfig) => {\n        const delay = getDelayFromKey(data.activePause)\n        if (delay !== undefined) {\n          pauseVideoAfterDelay(delay)\n        }\n      })\n    })\n  }\n}\n\n// Listen for messages from popup.js\nchrome.runtime.onMessage.addListener((message: Message) => {\n  if (message.excludeHosts !== undefined) {\n    excludeHosts = message.excludeHosts\n    return\n  }\n\n  if (isHostExcluded(window.location.hostname, excludeHosts)) {\n    console.log(\"Host is excluded from pausing\")\n    clearExistingTimer()\n    return\n  }\n\n  if (message.startPauseTimer !== undefined) {\n    // Clear any existing timer and start a new one\n    clearExistingTimer()\n    pauseVideoAfterDelay(message.startPauseTimer)\n  }\n\n  if (message.clearPausing) {\n    clearExistingTimer()\n  }\n})\n\n// Check if a pause timer is active on page load/reload\nchrome.storage.sync.get(null, (data: StoredConfig) => {\n  const delay = getDelayFromKey(data.activePause)\n  excludeHosts = data.excludeHosts ?? []\n\n  if (isHostExcluded(window.location.hostname, excludeHosts)) {\n    console.log(\"Host is excluded from pausing\")\n    return\n  }\n\n  if (delay !== undefined) {\n    pauseVideoAfterDelay(delay)\n  }\n  // Add event listeners to manage play/pause events\n  addVideoEventListeners()\n})\n"],"names":["normalizeHost","host","replace","toLowerCase","isHostExcluded","hostname","excludedHosts","normalizedHostname","some","excludedHost","normalizedExcludedHost","endsWith","removeBlackOverlay","overlay","document","getElementById","body","removeChild","activeTimer","excludeHosts","pauseVideoAfterDelay","delay","clearExistingTimer","window","setTimeout","videoElement","querySelector","paused","pause","createElement","id","style","position","top","left","width","height","backgroundColor","opacity","zIndex","addEventListener","appendChild","addBlackOverlay","undefined","clearTimeout","getDelayFromKey","key","chrome","runtime","onMessage","addListener","message","location","console","log","startPauseTimer","clearPausing","storage","sync","get","data","activePause","addVideoEventListeners"],"sourceRoot":""}